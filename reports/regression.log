Traceback (most recent call last):
  File "C:\Users\olive\Anaconda\lib\site-packages\jupyter_cache\executors\utils.py", line 51, in single_nb_execution
    executenb(
  File "C:\Users\olive\Anaconda\lib\site-packages\nbclient\client.py", line 1112, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "C:\Users\olive\Anaconda\lib\site-packages\nbclient\util.py", line 74, in wrapped
    return just_run(coro(*args, **kwargs))
  File "C:\Users\olive\Anaconda\lib\site-packages\nbclient\util.py", line 53, in just_run
    return loop.run_until_complete(coro)
  File "C:\Users\olive\Anaconda\lib\asyncio\base_events.py", line 642, in run_until_complete
    return future.result()
  File "C:\Users\olive\Anaconda\lib\site-packages\nbclient\client.py", line 553, in async_execute
    await self.async_execute_cell(
  File "C:\Users\olive\Anaconda\lib\site-packages\nbclient\client.py", line 857, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "C:\Users\olive\Anaconda\lib\site-packages\nbclient\client.py", line 760, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
ROOT = "https://raw.githubusercontent.com/jan-kirenz/project-OliScha/main/"
DATA = "project_data.csv?token=GHSAT0AAAAAABPCEITIYHBIEPRTFMZJXUGKYPKREJQ"

df = pd.read_csv(ROOT + DATA)
------------------

[1;31m---------------------------------------------------------------------------[0m
[1;31mHTTPError[0m                                 Traceback (most recent call last)
[1;32m~\AppData\Local\Temp/ipykernel_21520/1129817678.py[0m in [0;36m<module>[1;34m[0m
[0;32m      2[0m [0mDATA[0m [1;33m=[0m [1;34m"project_data.csv?token=GHSAT0AAAAAABPCEITIYHBIEPRTFMZJXUGKYPKREJQ"[0m[1;33m[0m[1;33m[0m[0m
[0;32m      3[0m [1;33m[0m[0m
[1;32m----> 4[1;33m [0mdf[0m [1;33m=[0m [0mpd[0m[1;33m.[0m[0mread_csv[0m[1;33m([0m[0mROOT[0m [1;33m+[0m [0mDATA[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m
[1;32m~\Anaconda\lib\site-packages\pandas\util\_decorators.py[0m in [0;36mwrapper[1;34m(*args, **kwargs)[0m
[0;32m    309[0m                     [0mstacklevel[0m[1;33m=[0m[0mstacklevel[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m    310[0m                 )
[1;32m--> 311[1;33m             [1;32mreturn[0m [0mfunc[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m,[0m [1;33m**[0m[0mkwargs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    312[0m [1;33m[0m[0m
[0;32m    313[0m         [1;32mreturn[0m [0mwrapper[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda\lib\site-packages\pandas\io\parsers\readers.py[0m in [0;36mread_csv[1;34m(filepath_or_buffer, sep, delimiter, header, names, index_col, usecols, squeeze, prefix, mangle_dupe_cols, dtype, engine, converters, true_values, false_values, skipinitialspace, skiprows, skipfooter, nrows, na_values, keep_default_na, na_filter, verbose, skip_blank_lines, parse_dates, infer_datetime_format, keep_date_col, date_parser, dayfirst, cache_dates, iterator, chunksize, compression, thousands, decimal, lineterminator, quotechar, quoting, doublequote, escapechar, comment, encoding, encoding_errors, dialect, error_bad_lines, warn_bad_lines, on_bad_lines, delim_whitespace, low_memory, memory_map, float_precision, storage_options)[0m
[0;32m    584[0m     [0mkwds[0m[1;33m.[0m[0mupdate[0m[1;33m([0m[0mkwds_defaults[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    585[0m [1;33m[0m[0m
[1;32m--> 586[1;33m     [1;32mreturn[0m [0m_read[0m[1;33m([0m[0mfilepath_or_buffer[0m[1;33m,[0m [0mkwds[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    587[0m [1;33m[0m[0m
[0;32m    588[0m [1;33m[0m[0m

[1;32m~\Anaconda\lib\site-packages\pandas\io\parsers\readers.py[0m in [0;36m_read[1;34m(filepath_or_buffer, kwds)[0m
[0;32m    480[0m [1;33m[0m[0m
[0;32m    481[0m     [1;31m# Create the parser.[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 482[1;33m     [0mparser[0m [1;33m=[0m [0mTextFileReader[0m[1;33m([0m[0mfilepath_or_buffer[0m[1;33m,[0m [1;33m**[0m[0mkwds[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    483[0m [1;33m[0m[0m
[0;32m    484[0m     [1;32mif[0m [0mchunksize[0m [1;32mor[0m [0miterator[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda\lib\site-packages\pandas\io\parsers\readers.py[0m in [0;36m__init__[1;34m(self, f, engine, **kwds)[0m
[0;32m    809[0m             [0mself[0m[1;33m.[0m[0moptions[0m[1;33m[[0m[1;34m"has_index_names"[0m[1;33m][0m [1;33m=[0m [0mkwds[0m[1;33m[[0m[1;34m"has_index_names"[0m[1;33m][0m[1;33m[0m[1;33m[0m[0m
[0;32m    810[0m [1;33m[0m[0m
[1;32m--> 811[1;33m         [0mself[0m[1;33m.[0m[0m_engine[0m [1;33m=[0m [0mself[0m[1;33m.[0m[0m_make_engine[0m[1;33m([0m[0mself[0m[1;33m.[0m[0mengine[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    812[0m [1;33m[0m[0m
[0;32m    813[0m     [1;32mdef[0m [0mclose[0m[1;33m([0m[0mself[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda\lib\site-packages\pandas\io\parsers\readers.py[0m in [0;36m_make_engine[1;34m(self, engine)[0m
[0;32m   1038[0m             )
[0;32m   1039[0m         [1;31m# error: Too many arguments for "ParserBase"[0m[1;33m[0m[1;33m[0m[0m
[1;32m-> 1040[1;33m         [1;32mreturn[0m [0mmapping[0m[1;33m[[0m[0mengine[0m[1;33m][0m[1;33m([0m[0mself[0m[1;33m.[0m[0mf[0m[1;33m,[0m [1;33m**[0m[0mself[0m[1;33m.[0m[0moptions[0m[1;33m)[0m  [1;31m# type: ignore[call-arg][0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m   1041[0m [1;33m[0m[0m
[0;32m   1042[0m     [1;32mdef[0m [0m_failover_to_python[0m[1;33m([0m[0mself[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda\lib\site-packages\pandas\io\parsers\c_parser_wrapper.py[0m in [0;36m__init__[1;34m(self, src, **kwds)[0m
[0;32m     49[0m [1;33m[0m[0m
[0;32m     50[0m         [1;31m# open handles[0m[1;33m[0m[1;33m[0m[0m
[1;32m---> 51[1;33m         [0mself[0m[1;33m.[0m[0m_open_handles[0m[1;33m([0m[0msrc[0m[1;33m,[0m [0mkwds[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m     52[0m         [1;32massert[0m [0mself[0m[1;33m.[0m[0mhandles[0m [1;32mis[0m [1;32mnot[0m [1;32mNone[0m[1;33m[0m[1;33m[0m[0m
[0;32m     53[0m [1;33m[0m[0m

[1;32m~\Anaconda\lib\site-packages\pandas\io\parsers\base_parser.py[0m in [0;36m_open_handles[1;34m(self, src, kwds)[0m
[0;32m    220[0m         [0mLet[0m [0mthe[0m [0mreaders[0m [0mopen[0m [0mIOHandles[0m [0mafter[0m [0mthey[0m [0mare[0m [0mdone[0m [1;32mwith[0m [0mtheir[0m [0mpotential[0m [0mraises[0m[1;33m.[0m[1;33m[0m[1;33m[0m[0m
[0;32m    221[0m         """
[1;32m--> 222[1;33m         self.handles = get_handle(
[0m[0;32m    223[0m             [0msrc[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m    224[0m             [1;34m"r"[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda\lib\site-packages\pandas\io\common.py[0m in [0;36mget_handle[1;34m(path_or_buf, mode, encoding, compression, memory_map, is_text, errors, storage_options)[0m
[0;32m    607[0m [1;33m[0m[0m
[0;32m    608[0m     [1;31m# open URLs[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 609[1;33m     ioargs = _get_filepath_or_buffer(
[0m[0;32m    610[0m         [0mpath_or_buf[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m
[0;32m    611[0m         [0mencoding[0m[1;33m=[0m[0mencoding[0m[1;33m,[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda\lib\site-packages\pandas\io\common.py[0m in [0;36m_get_filepath_or_buffer[1;34m(filepath_or_buffer, encoding, compression, mode, storage_options)[0m
[0;32m    310[0m         [1;31m# assuming storage_options is to be interpreted as headers[0m[1;33m[0m[1;33m[0m[0m
[0;32m    311[0m         [0mreq_info[0m [1;33m=[0m [0murllib[0m[1;33m.[0m[0mrequest[0m[1;33m.[0m[0mRequest[0m[1;33m([0m[0mfilepath_or_buffer[0m[1;33m,[0m [0mheaders[0m[1;33m=[0m[0mstorage_options[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 312[1;33m         [1;32mwith[0m [0murlopen[0m[1;33m([0m[0mreq_info[0m[1;33m)[0m [1;32mas[0m [0mreq[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    313[0m             [0mcontent_encoding[0m [1;33m=[0m [0mreq[0m[1;33m.[0m[0mheaders[0m[1;33m.[0m[0mget[0m[1;33m([0m[1;34m"Content-Encoding"[0m[1;33m,[0m [1;32mNone[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0;32m    314[0m             [1;32mif[0m [0mcontent_encoding[0m [1;33m==[0m [1;34m"gzip"[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda\lib\site-packages\pandas\io\common.py[0m in [0;36murlopen[1;34m(*args, **kwargs)[0m
[0;32m    210[0m     [1;32mimport[0m [0murllib[0m[1;33m.[0m[0mrequest[0m[1;33m[0m[1;33m[0m[0m
[0;32m    211[0m [1;33m[0m[0m
[1;32m--> 212[1;33m     [1;32mreturn[0m [0murllib[0m[1;33m.[0m[0mrequest[0m[1;33m.[0m[0murlopen[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m,[0m [1;33m**[0m[0mkwargs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    213[0m [1;33m[0m[0m
[0;32m    214[0m [1;33m[0m[0m

[1;32m~\Anaconda\lib\urllib\request.py[0m in [0;36murlopen[1;34m(url, data, timeout, cafile, capath, cadefault, context)[0m
[0;32m    212[0m     [1;32melse[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    213[0m         [0mopener[0m [1;33m=[0m [0m_opener[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 214[1;33m     [1;32mreturn[0m [0mopener[0m[1;33m.[0m[0mopen[0m[1;33m([0m[0murl[0m[1;33m,[0m [0mdata[0m[1;33m,[0m [0mtimeout[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    215[0m [1;33m[0m[0m
[0;32m    216[0m [1;32mdef[0m [0minstall_opener[0m[1;33m([0m[0mopener[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda\lib\urllib\request.py[0m in [0;36mopen[1;34m(self, fullurl, data, timeout)[0m
[0;32m    521[0m         [1;32mfor[0m [0mprocessor[0m [1;32min[0m [0mself[0m[1;33m.[0m[0mprocess_response[0m[1;33m.[0m[0mget[0m[1;33m([0m[0mprotocol[0m[1;33m,[0m [1;33m[[0m[1;33m][0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    522[0m             [0mmeth[0m [1;33m=[0m [0mgetattr[0m[1;33m([0m[0mprocessor[0m[1;33m,[0m [0mmeth_name[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 523[1;33m             [0mresponse[0m [1;33m=[0m [0mmeth[0m[1;33m([0m[0mreq[0m[1;33m,[0m [0mresponse[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    524[0m [1;33m[0m[0m
[0;32m    525[0m         [1;32mreturn[0m [0mresponse[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda\lib\urllib\request.py[0m in [0;36mhttp_response[1;34m(self, request, response)[0m
[0;32m    630[0m         [1;31m# request was successfully received, understood, and accepted.[0m[1;33m[0m[1;33m[0m[0m
[0;32m    631[0m         [1;32mif[0m [1;32mnot[0m [1;33m([0m[1;36m200[0m [1;33m<=[0m [0mcode[0m [1;33m<[0m [1;36m300[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 632[1;33m             response = self.parent.error(
[0m[0;32m    633[0m                 'http', request, response, code, msg, hdrs)
[0;32m    634[0m [1;33m[0m[0m

[1;32m~\Anaconda\lib\urllib\request.py[0m in [0;36merror[1;34m(self, proto, *args)[0m
[0;32m    559[0m         [1;32mif[0m [0mhttp_err[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    560[0m             [0margs[0m [1;33m=[0m [1;33m([0m[0mdict[0m[1;33m,[0m [1;34m'default'[0m[1;33m,[0m [1;34m'http_error_default'[0m[1;33m)[0m [1;33m+[0m [0morig_args[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 561[1;33m             [1;32mreturn[0m [0mself[0m[1;33m.[0m[0m_call_chain[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    562[0m [1;33m[0m[0m
[0;32m    563[0m [1;31m# XXX probably also want an abstract factory that knows when it makes[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda\lib\urllib\request.py[0m in [0;36m_call_chain[1;34m(self, chain, kind, meth_name, *args)[0m
[0;32m    492[0m         [1;32mfor[0m [0mhandler[0m [1;32min[0m [0mhandlers[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    493[0m             [0mfunc[0m [1;33m=[0m [0mgetattr[0m[1;33m([0m[0mhandler[0m[1;33m,[0m [0mmeth_name[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 494[1;33m             [0mresult[0m [1;33m=[0m [0mfunc[0m[1;33m([0m[1;33m*[0m[0margs[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    495[0m             [1;32mif[0m [0mresult[0m [1;32mis[0m [1;32mnot[0m [1;32mNone[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    496[0m                 [1;32mreturn[0m [0mresult[0m[1;33m[0m[1;33m[0m[0m

[1;32m~\Anaconda\lib\urllib\request.py[0m in [0;36mhttp_error_default[1;34m(self, req, fp, code, msg, hdrs)[0m
[0;32m    639[0m [1;32mclass[0m [0mHTTPDefaultErrorHandler[0m[1;33m([0m[0mBaseHandler[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[0;32m    640[0m     [1;32mdef[0m [0mhttp_error_default[0m[1;33m([0m[0mself[0m[1;33m,[0m [0mreq[0m[1;33m,[0m [0mfp[0m[1;33m,[0m [0mcode[0m[1;33m,[0m [0mmsg[0m[1;33m,[0m [0mhdrs[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m
[1;32m--> 641[1;33m         [1;32mraise[0m [0mHTTPError[0m[1;33m([0m[0mreq[0m[1;33m.[0m[0mfull_url[0m[1;33m,[0m [0mcode[0m[1;33m,[0m [0mmsg[0m[1;33m,[0m [0mhdrs[0m[1;33m,[0m [0mfp[0m[1;33m)[0m[1;33m[0m[1;33m[0m[0m
[0m[0;32m    642[0m [1;33m[0m[0m
[0;32m    643[0m [1;32mclass[0m [0mHTTPRedirectHandler[0m[1;33m([0m[0mBaseHandler[0m[1;33m)[0m[1;33m:[0m[1;33m[0m[1;33m[0m[0m

[1;31mHTTPError[0m: HTTP Error 404: Not Found
HTTPError: HTTP Error 404: Not Found

